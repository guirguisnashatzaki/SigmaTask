// Mocks generated by Mockito 5.4.4 from annotations
// in sigma_task/test/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sigma_task/models/user.dart' as _i5;
import 'package:sigma_task/repository/userRepository.dart' as _i3;
import 'package:sigma_task/webServices/user_web_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserWebService_0 extends _i1.SmartFake
    implements _i2.UserWebService {
  _FakeUserWebService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserWebService get userWebService => (super.noSuchMethod(
        Invocation.getter(#userWebService),
        returnValue: _FakeUserWebService_0(
          this,
          Invocation.getter(#userWebService),
        ),
      ) as _i2.UserWebService);

  @override
  set userWebService(_i2.UserWebService? _userWebService) => super.noSuchMethod(
        Invocation.setter(
          #userWebService,
          _userWebService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i5.User>> getAllUsers(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [limit],
        ),
        returnValue: _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
      ) as _i4.Future<List<_i5.User>>);
}
